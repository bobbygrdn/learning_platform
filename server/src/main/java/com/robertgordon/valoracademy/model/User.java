package com.robertgordon.valoracademy.model;

import javax.persistence.*;
import lombok.Data;

/** `@Entity` is being used to map this class to a database table. 
 * `@Table(name = "users")` specifies the name of the table in the database that
 * this entity will be mapped to. 
 * `@Data` is a Lombok annotation that generates boilerplate code for getters, setters, and other methods. */
@Entity
@Table(name = "users")
@Data
public class User {

    /** `@Id` is an annotation used to mark the primary key of the entity. 
     * `@GeneratedValue` is used to specify how the primary key should be generated. 
     * `GenerationType.IDENTITY` specifies that the primary key should be generated by
     *  the database. 
     * `private long id;` is a field that represents the primary key of the entity. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

     /** `@Column(name = "username", nullable = false)` is an annotation used to specify
     *  that the `username`
     * field should be mapped to a column in the database table named `username`. 
     * The `nullable = false` parameter specifies that the `username` field cannot be 
     * null in the database. 
     * The `private String username;` line is declaring a field named `username` of 
     * type `String` in the `User` class. */
    @Column(name = "username", nullable = false)
    private String username;

    /** `@Column(name = "password", nullable = false)` is an annotation used to specify
     *  that the `password`
     * field should be mapped to a column in the database table named `password`. 
     * The `nullable = false` parameter specifies that the `password` field cannot be 
     * null in the database. 
     * The `private String password;` line is declaring a field named `password` of 
     * type `String` in the `User` class. */
    @Column(name = "password", nullable = false)
    private String password;

    /** `@Column(name = "email", nullable = false)` is an annotation used to specify
     *  that the `email`
     * field should be mapped to a column in the database table named `email`. 
     * The `nullable = false` parameter specifies that the `email` field cannot be 
     * null in the database. 
     * The `private String email;` line is declaring a field named `email` of 
     * type `String` in the `User` class. */
    @Column(name = "email", nullable = false)
    private String email;

    /** `@Column(name = "role", nullable = false)` is an annotation used to specify
     *  that the `role`
     * field should be mapped to a column in the database table named `role`. 
     * The `nullable = false` parameter specifies that the `role` field cannot be 
     * null in the database. 
     * The `private String role;` line is declaring a field named `role` of 
     * type `String` in the `User` class. */
    @Column(name = "role", nullable = false)
    private String role;

    /** `@Column(name = "keepLoggedIn", nullable = false)` is an annotation used to 
     * specify that the `keepLoggedIn`
     * field should be mapped to a column in the database table named `keepLoggedIn`. 
     * The `nullable = false` parameter specifies that the `keepLoggedIn` field cannot
     *  be null in the database. 
     * The `private String keepLoggedIn;` line is declaring a field named 
     * `keepLoggedIn` of type `String` in the `User` class. */
    @Column(name = "keepLoggedIn", nullable = false, columnDefinition = "boolean default 'false'")
    private boolean keepLoggedIn;

}
